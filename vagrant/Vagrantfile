# -*- mode: ruby -*-
# vi: set ft=ruby :

machines = [
    {
        :name => "fedora",
        :sys => "generic/fedora36",
        :ram => "512",
        :repoCommand => 'fedora/installRepo.sh',
        :installCommand => 'sudo yum -y install hazelcast',
        :installEnterpriseCommand => 'sudo yum -y install hazelcast-enterprise',
        :repoEnvName => 'RPM_REPO'
    },
    {
        :name => "ubuntu",
        :sys => "ubuntu/kinetic64",
        :ram => "512",
        :repoCommand => 'ubuntu/installRepo.sh',
        :installCommand => "sudo apt --assume-yes install hazelcast",
        :installEnterpriseCommand => 'sudo apt --assume-yes install hazelcast-enterprise',
        :repoEnvName => 'DEBIAN_REPO'
    }
]

Vagrant.configure("2") do |config|
  machines.each do |machine|
    config.vm.define machine[:name] do |machineConf|
        machineConf.vm.box = machine[:sys]
        machineConf.vm.hostname = machine[:name]

        machineConf.vm.provider :virtualbox do |vb|
            vb.customize [
                "modifyvm", :id,
                "--memory", machine[:ram].to_s,
                "--cpus", '2',
                "--name", machine[:name]
            ]
            vb.gui = true
          end

        machineConf.vm.provision "file",
            source: "../config/integration-test-hazelcast.yaml",
            destination: "~/hz-config.yaml"
        machineConf.vm.provision "file",
            source: "./" + machine[:name] + "/uninstall.sh",
            destination: "~/uninstall.sh"
        machineConf.vm.provision "file",
            source: "./" + machine[:name] + "/install.sh",
            destination: "~/install.sh"
        machineConf.vm.provision "file",
            source: "../check-hazelcast-health.sh",
            destination: "~/check-hazelcast-health.sh"
        machineConf.vm.provision "shell", :privileged => false, inline: "chmod +x ~/check-hazelcast-health.sh"
        machineConf.vm.provision "shell", :privileged => false, inline: "chmod +x ~/install.sh"
        machineConf.vm.provision "shell", :privileged => false, inline: "chmod +x ~/uninstall.sh"

        hzLicenseKey = ENV['HZ_LICENSEKEY'];
        if not (hzLicenseKey.nil || hzLicenseKey.empty)
            machineConf.vm.provision "shell", :privileged => false, inline: "export HZ_LICENSEKEY=" + hzLicenseKey
        end;

        packageRepo = ENV['PACKAGE_REPO']
        if packageRepo.nil? || packageRepo.empty?
            packageRepo = "stable"
        end
        machineConf.vm.provision "shell" do |s|
            s.privileged = false
            s.path = machine[:repoCommand]
            s.args = [ ENV[machine[:repoEnvName]], packageRepo ]
        end
    end
  end
end
